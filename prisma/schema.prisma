generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


model File {
  id                         String      @id @default(uuid())
  url                        String
  name                       String
  size                       Int
  type                       String
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  agencyLicense              AgencyForm? @relation("AgencyBusinessLicense")
  agencyLogo                 AgencyForm? @relation("AgencyLogo")
  dmcRegistrationCertificate DMCForm?    @relation("DMCRegistrationCertificate")
  managerProfile             Manager?    @relation("ManagerProfile")
  userProfile                UserForm?   @relation("UserProfileImage")
  userProfileImage User? @relation("UserProfileImage")
  paymentMethodQRCode        PaymentMethod? @relation("PaymentMethodQRCode")

  @@map("file")
}


model User {
  id             String         @id @default(cuid())
  email          String         @unique
  password       String
  name           String? 
  companyName    String
  businessType   BusinessType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           Role           @default(USER)
  userType       UserType
  isOnline       Boolean        @default(false) 
  agencyId       String?
  dmcId          String?
  passwordResets PasswordReset?
  agency         Agency?        @relation(fields: [agencyId], references: [id]) 
  dmc            DMC?           @relation(fields: [dmcId], references: [id])

   
  profileImgId   String?        @unique
  profileImage   File?  @relation("UserProfileImage", fields: [profileImgId], references: [id])  

  // Comments authored by this user
  comments       Comment[]      @relation("CommentAuthor") 

  @@index([email])
  @@index([role])
}


model Agency {
  id            String         @id @default(uuid())
  name          String
  config        Json
  createdBy     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  users         User[]

  @@index([name])
}

model DMC {
  id        String   @id @default(uuid())
  name      String
  config    Json
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@index([name])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  maxRequests   Int
  maxUsers      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Feature {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id           String      @id @default(uuid())
  agencyId     String
  planId       String
  featureId    String
  requestLimit Int
  userLimit    Int
  agencyFormId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  agencyForm   AgencyForm? @relation(fields: [agencyFormId], references: [id], onDelete: Cascade)
  agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  feature      Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  plan         Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([agencyId, featureId])
}

model AgencyForm {
  id                 String         @id @default(uuid())
  name               String
  config             Json           @default("{}")
  contactPerson      String?
  agencyType         AgencyType?
  designation        String?
  phoneNumber        String?
  phoneCountryCode   String?        @default("+91")
  ownerName          String?
  email              String?
  companyPhone       String?
  companyPhoneCode   String?        @default("+91")
  website            String?
  landingPageColor   String?        @default("#4ECDC4")
  gstRegistered      Boolean?       @default(true)
  gstNumber          String?
  yearOfRegistration String?
  panNumber          String?
  panType            PanType?
  headquarters       String?
  country            String?        @default("INDIA")
  yearsOfOperation   String?
  logoId             String?        @unique
  businessLicenseId  String?        @unique
  createdBy          String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  businessLicense    File?          @relation("AgencyBusinessLicense", fields: [businessLicenseId], references: [id])
  logo               File?          @relation("AgencyLogo", fields: [logoId], references: [id])
  subscriptions      Subscription[]

  @@index([name])
  @@index([email])
}

model DMCForm {
  id                        String    @id @default(uuid())
  agencyId                  String?
  name                      String
  config                    Json      @default("{}")
  contactPerson             String?
  designation               String?
  phoneNumber               String?
  phoneCountryCode          String?   @default("+91")
  ownerName                 String?
  email                     String?
  ownerPhoneNumber          String?
  ownerPhoneCode            String?   @default("+91")
  website                   String?
  primaryCountry            String?
  destinationsCovered       String?
  cities                    String?
  gstRegistered             Boolean?  @default(true)
  gstNumber                 String?
  yearOfRegistration        String?
  panNumber                 String?
  panType                   PanType?
  headquarters              String?
  country                   String?
  yearsOfExperience         String?
  registrationCertificateId String?   @unique
  createdBy                 String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  status                    DMCStatus @default(ACTIVE)
  registrationCertificate   File?     @relation("DMCRegistrationCertificate", fields: [registrationCertificateId], references: [id])
  paymentMethods            PaymentMethod[]

  @@index([name])
  @@index([email])
  @@index([createdBy])
  @@index([agencyId])
  @@index([status])
}

model Manager {
  id        String   @id @default(uuid())
  name      String
  phone     String
  email     String   @unique
  username  String   @unique
  password  String
  status    String   @default("INACTIVE")
  profileId String?  @unique
  profile   File?    @relation("ManagerProfile", fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  // Comments on this manager
  comments  Comment[] @relation("ManagerComments")
}

model UserForm {
  id             String     @id @default(uuid())
  name           String
  phoneNumber    String
  phoneExtension String     @default("+91")
  email          String     @unique
  username       String     @unique
  password       String
  profileImageId String?    @unique
  status         UserStatus @default(ACTIVE)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      String
  profileImage   File?      @relation("UserProfileImage", fields: [profileImageId], references: [id])

  @@map("user_form") // Explicit table name mapping
}

model PaymentMethod {
  id          String            @id @default(uuid())
  dmcId       String?           // Made optional
  dmc         DMCForm?          @relation(fields: [dmcId], references: [id])
  type        PaymentMethodType
  // Common fields
  name        String?
  identifier  String? // Account number, UPI ID, etc.
  // Bank-specific fields
  bankName    String?
  branchName  String?
  ifscCode    String?
  bankCountry String?
  currency    String?
  // Card-specific fields
  cardHolder  String?
  expiryDate  String?
  // UPI-specific fields
  upiProvider String?
  // QR Code
  qrCodeId    String?   @unique
  qrCode      File?     @relation("PaymentMethodQRCode", fields: [qrCodeId], references: [id], onDelete: Cascade)
  // Payment Gateway
  paymentLink String?
  // Metadata
  notes       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([dmcId])
  @@index([type])
}

model Customer {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  phone          String?
  whatsappNumber String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  enquiries        Enquiry[]
  itineraries      Itinerary[]
  feedbacks        CustomerFeedback[]
  sentItineraries  SentItinerary[]

  @@map("customers")
}


model Enquiry {
  id                 String        @id @default(cuid())
  name               String
  phone              String
  email              String
  locations          String
  tourType           String
  estimatedDates     String
  currency           String        @default("USD")
  budget             Int           @default(1000)
  notes              String?
  assignedStaff      String?
  pointOfContact     String?
  leadSource         String        @default("Direct")
  flightsRequired    String        @default("no")
  pickupLocation     String?
  dropLocation       String?
  numberOfTravellers String?
  numberOfKids       String?
  travelingWithPets  String?
  status             String        @default("enquiry")
  enquiryDate        String
  tags               String?       @default("sightseeing")
  mustSeeSpots       String?
  pacePreference     String?       @default("relaxed")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
    // Relations
  customerId   String?
  customer     Customer? @relation(fields: [customerId], references: [id])
  itineraries  Itinerary[]

  @@map("enquiries")
}

model Itinerary {
  id                   String   @id @default(cuid())
  enquiryId            String
  customerId           String?
  destinations         String?
  startDate            String?
  endDate              String?
  travelType           String?
  adults               Int      @default(0)
  children             Int      @default(0)
  under6               Int      @default(0)
  from7to12            Int      @default(0)
  flightsRequired      String?
  pickupLocation       String?
  dropLocation         String?
  currency             String   @default("USD")
  budget               Int      @default(0)
  activityPreferences  String?
  hotelPreferences     String?
  mealPreference       String?
  dietaryPreference    String?
  transportPreferences String?
  travelingWithPets    String?
  additionalRequests   String?
  moreDetails          String?
  status               String   @default("draft")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  mustSeeSpots         String?  // New field
  pacePreference       String?  @default("relaxed") // New field
  pdfUrl                 String?  // Added missing field
  itineraryType          String?  // Added missing field
  activeStatus           Boolean  @default(true) // Added missing field
accommodation Json @default("[]")  // Default empty array
  dailyItinerary Json @default("[]")

  
  enquiry      Enquiry   @relation(fields: [enquiryId], references: [id])
  
  customer     Customer? @relation(fields: [customerId], references: [id])
  feedbacks    CustomerFeedback[]
  sentItineraries SentItinerary[]

  @@map("itineraries")
}

model CustomerFeedback {
  id          String   @id @default(cuid())
  type        String   @default("note") // "note", "feedback", "change_request"
  title       String
  description String
  status      String   @default("pending") // "pending", "confirmed", "changes", "note"
  documentUrl String?  // URL to uploaded document
  documentName String? // Original filename
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customerId   String
  customer     Customer  @relation(fields: [customerId], references: [id])
  itineraryId  String?
  itinerary    Itinerary? @relation(fields: [itineraryId], references: [id])

  @@map("customer_feedbacks")
}

model SentItinerary {
  id             String   @id @default(cuid())
  customerName   String
  email          String
  whatsappNumber String? 
  notes          String?
  documentUrl    String?  // URL to supporting document
  documentName   String?  // Original filename
  status         String   @default("sent") // "sent", "delivered", "read"
  sentDate       DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  customerId   String
  customer     Customer  @relation(fields: [customerId], references: [id])
  itineraryId  String?
  itinerary    Itinerary? @relation(fields: [itineraryId], references: [id])

  @@map("sent_itineraries")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  managerId String
  manager   Manager @relation("ManagerComments", fields: [managerId], references: [id], onDelete: Cascade)
  
  authorId  String
  author    User    @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

enum PaymentMethodType {
  BANK_ACCOUNT
  CREDIT_CARD
  DEBIT_CARD
  UPI
  QR_CODE
  PAYMENT_GATEWAY
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  AGENT_USER
  AGENT_ADMIN
  DMC_USER
  DMC_ADMIN
}

enum UserType {
  TEKKING_MYLES
  AGENCY
  DMC
}

enum BusinessType {
  TEKKING_MYLES
  AGENCY
  DMC
}

enum ManagerStatus {
  ACTIVE
  INACTIVE
}

enum DMCStatus {
  ACTIVE
  DEACTIVE
}

enum DMCRequestStatusEnum {
  PENDING
  APPROVED
  REJECTED
}

enum AgencyType {
  PRIVATE_LIMITED
  PROPRIETORSHIP
  PARTNERSHIP
  PUBLIC_LIMITED
  LLP
  TOUR_OPERATOR
  TRAVEL_AGENT
  DMC
  OTHER
}

enum PanType {
  INDIVIDUAL
  COMPANY
  TRUST
  OTHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}