generator client {
  provider = "prisma-client-js"
} 

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model File {
  id                         String         @id @default(uuid())
  url                        String
  name                       String
  size                       Int
  type                       String
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  agencyLicense              AgencyForm?    @relation("AgencyBusinessLicense")
  agencyLogo                 AgencyForm?    @relation("AgencyLogo")
  dmcRegistrationCertificate DMCForm?       @relation("DMCRegistrationCertificate")
  managerProfile             Manager?       @relation("ManagerProfile")
  userProfile                UserForm?      @relation("UserProfileImage")
  userProfileImage           User?          @relation("UserProfileImage")
  paymentMethodQRCode        PaymentMethod? @relation("PaymentMethodQRCode")
  adminProfile               Admin?         @relation("AdminProfile")

  @@map("file")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  password       String
  name           String?
  companyName    String
  businessType   BusinessType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           Role           @default(USER)
  userType       UserType
  isOnline       Boolean        @default(false)
  agencyId       String?
  dmcId          String?
  profileImgId   String?        @unique
  passwordResets PasswordReset?
  agency         Agency?        @relation(fields: [agencyId], references: [id])
  dmc            DMC?           @relation(fields: [dmcId], references: [id])
  profileImage   File?          @relation("UserProfileImage", fields: [profileImgId], references: [id])
  comments       Comment[]      @relation("CommentAuthor")

  @@index([email])
  @@index([role])
}


model Agency {
  id            String         @id @default(uuid())
  name          String
  config        Json
  createdBy     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  users         User[]

  @@index([name])
}

model DMC {
  id        String   @id @default(uuid())
  name      String
  config    Json
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  @@index([name])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  maxRequests   Int
  maxUsers      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Feature {
  id            String         @id @default(uuid())
  name          String         @unique
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id           String      @id @default(uuid())
  agencyId     String
  planId       String
  featureId    String
  requestLimit Int
  userLimit    Int
  agencyFormId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  agencyForm   AgencyForm? @relation(fields: [agencyFormId], references: [id], onDelete: Cascade)
  agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  feature      Feature     @relation(fields: [featureId], references: [id], onDelete: Cascade)
  plan         Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([agencyId, featureId])
}

model AgencyForm {
  id                 String         @id @default(uuid())
  name               String
  config             Json           @default("{}")
  contactPerson      String?
  agencyType         AgencyType?
  designation        String?
  phoneNumber        String?
  phoneCountryCode   String?        @default("+91")
  ownerName          String?
  email              String?
  companyPhone       String?
  companyPhoneCode   String?        @default("+91")
  website            String?
  landingPageColor   String?        @default("#4ECDC4")
  gstRegistered      Boolean?       @default(true)
  gstNumber          String?
  yearOfRegistration String?
  panNumber          String?
  panType            PanType?
  headquarters       String?
  country            String?        @default("INDIA")
  yearsOfOperation   String?
  logoId             String?        @unique
  businessLicenseId  String?        @unique
  createdBy          String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  businessLicense    File?          @relation("AgencyBusinessLicense", fields: [businessLicenseId], references: [id])
  logo               File?          @relation("AgencyLogo", fields: [logoId], references: [id])
  subscriptions      Subscription[]

  @@index([name])
  @@index([email])
}

model DMCForm {
  id                        String          @id @default(uuid())
  name                      String
  config                    Json            @default("{}")
  contactPerson             String?
  designation               String?
  phoneNumber               String?
  phoneCountryCode          String?         @default("+91")
  ownerName                 String?
  email                     String?
  ownerPhoneNumber          String?
  ownerPhoneCode            String?         @default("+91")
  website                   String?
  primaryCountry            String?
  destinationsCovered       String?
  cities                    String?
  gstRegistered             Boolean?        @default(true)
  gstNumber                 String?
  yearOfRegistration        String?
  panNumber                 String?
  panType                   PanType?
  headquarters              String?
  country                   String?
  yearsOfExperience         String?
  registrationCertificateId String?         @unique
  createdBy                 String
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  status                    DMCStatus       @default(ACTIVE)
  agencyId                  String?
  sharedItems               SharedDMCItem[] @relation("SharedDMCItems")
  registrationCertificate   File?           @relation("DMCRegistrationCertificate", fields: [registrationCertificateId], references: [id])
  paymentMethods            PaymentMethod[]

  @@index([name])
  @@index([email])
  @@index([createdBy])
  @@index([agencyId])
  @@index([status])
}


model Manager {
  id        String    @id @default(uuid())
  name      String
  phone     String
  email     String    @unique
  username  String    @unique
  password  String
  profileId String?   @unique
  createdAt DateTime  @default(now())
  status    String    @default("INACTIVE")
  updatedAt DateTime  @default(now()) @updatedAt
  profile   File?     @relation("ManagerProfile", fields: [profileId], references: [id])
  comments  Comment[] @relation("ManagerComments")
}


model UserForm {
  id             String     @id @default(uuid())
  name           String
  phoneNumber    String
  phoneExtension String     @default("+91")
  email          String     @unique
  username       String     @unique
  password       String
  profileImageId String?    @unique
  status         UserStatus @default(ACTIVE)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      String
  profileImage   File?      @relation("UserProfileImage", fields: [profileImageId], references: [id])

  @@map("user_form")
}

model PaymentMethod {
  id          String            @id @default(uuid())
  dmcId       String?
  type        PaymentMethodType
  name        String?
  identifier  String?
  bankName    String?
  branchName  String?
  ifscCode    String?
  bankCountry String?
  currency    String?
  cardHolder  String?
  expiryDate  String?
  upiProvider String?
  qrCodeId    String?           @unique
  paymentLink String?
  notes       String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  dmc         DMCForm?          @relation(fields: [dmcId], references: [id])
  qrCode      File?             @relation("PaymentMethodQRCode", fields: [qrCodeId], references: [id], onDelete: Cascade)
  bankData Json?
  
  @@index([dmcId])
  @@index([type])
}

model enquiries {
  id                  String    @id @default(uuid())
  name                String
  phone               String
  email               String
  locations           String?
  tourType            String?
  estimatedDates      String?
  currency            String?
  budget              Int?
  notes               String?
  assignedStaff       String?
  pointOfContact      String?
  pickupLocation      String?
  dropLocation        String?
  numberOfTravellers  String?
  numberOfKids        String?
  travelingWithPets   String?
  flightsRequired     String?   @default("no")
  leadSource          String?   @default("Direct")
  tags                String?   @default("sightseeing")
  mustSeeSpots        String?
  pacePreference      String?   @default("relaxed")
  status              String    @default("enquiry")
  enquiryDate         String    @default("now()") 
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  customerId          String?
  customer            customers? @relation(fields: [customerId], references: [id])

  itineraries         itineraries[]
  sharedCustomerPdfs  SharedCustomerPdf[] // Added relation

  @@index([status])
  @@index([enquiryDate])
  @@index([customerId])
  @@index([email])
}

model itineraries {
  id                   String   @id @default(uuid())
  enquiryId            String
  location             String?
  numberOfDays         String?
  travelStyle          String?
  budgetEstimation     Json?
  accommodation        Json?
  dailyItinerary       Json?
  enquiryDetails       Json?
  activeStatus         Boolean?  @default(true) 
  pdfUrl               String?  @map("pdf_url")

  destinations         String?
  startDate            String?
  endDate              String?
  travelType           String?
  adults               Int?
  children             Int?
  under6               Int?
  from7to12            Int?
  flightsRequired      String?
  pickupLocation       String?
  dropLocation         String?
  currency             String?
  budget               Int?
  activityPreferences  String?
  hotelPreferences     String?
  mealPreference       String?
  dietaryPreference    String?
  transportPreferences String?
  travelingWithPets    String?
  additionalRequests   String?
  moreDetails          String?
  mustSeeSpots         String?
  pacePreference       String?
  status               String   @default("draft")
  
  // Cancellation Policy Fields - These should be added to your database
  cancellationPolicyType      CancellationPolicyType? @default(DEFAULT)
  customCancellationDeadline  Int?                    // Days before travel
  customCancellationTerms     String?                 // Custom terms text
  agencyCancellationPolicyId  String?                 // Reference to agency policy
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  customerId           String?
  customer             customers? @relation(fields: [customerId], references: [id])

  enquiry              enquiries @relation(fields: [enquiryId], references: [id])
  feedbacks            customer_feedbacks[]
  sentItineraries      sent_itineraries[]
  
  agencyCancellationPolicy AgencyCancellationPolicy? @relation(fields: [agencyCancellationPolicyId], references: [id])
  sharedCustomerPdfs       SharedCustomerPdf[]

  @@index([enquiryId])
  @@index([customerId])
  @@index([status])
  @@index([startDate])
  @@index([agencyCancellationPolicyId])
}

model AgencyCancellationPolicy {
  id           String   @id @default(uuid())
  name         String
  deadlineHours Int     // Hours before travel start
  terms        String   // Policy terms text
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  itineraries  itineraries[]
}

model SharedCustomerPdf {
  id              String   @id @default(uuid())
  itineraryId     String
  customerId      String
  enquiryId       String?
  pdfUrl          String   // URL to the generated PDF
  pdfFileName     String   // Original filename
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerWhatsapp String?
  emailSent       Boolean  @default(false)
  emailSentAt     DateTime?
  whatsappSent    Boolean  @default(false)
  whatsappSentAt  DateTime?
  downloadCount   Int      @default(0)
  lastDownloadAt  DateTime?
  status          SharedPdfStatus @default(GENERATED)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String

  // Relations
  itinerary       itineraries @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  customer        customers   @relation(fields: [customerId], references: [id])
  enquiry         enquiries?  @relation(fields: [enquiryId], references: [id])
  emailLogs       EmailLog[]

  @@index([itineraryId])
  @@index([customerId])
  @@index([enquiryId])
  @@index([status])
  @@index([emailSent])
  @@map("shared_customer_pdfs")
}

model EmailLog {
  id                  String   @id @default(uuid())
  sharedCustomerPdfId String
  recipientEmail      String
  recipientName       String?
  subject             String
  emailType           EmailType @default(ITINERARY_SHARE)
  status              EmailStatus @default(PENDING)
  sentAt              DateTime?
  deliveredAt         DateTime?
  openedAt            DateTime?
  errorMessage        String?
  retryCount          Int      @default(0)
  maxRetries          Int      @default(3)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  sharedCustomerPdf   SharedCustomerPdf @relation(fields: [sharedCustomerPdfId], references: [id], onDelete: Cascade)

  @@index([sharedCustomerPdfId])
  @@index([recipientEmail])
  @@index([status])
  @@index([emailType])
  @@map("email_logs")
}

model customers {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  phone          String?
  whatsappNumber String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  enquiries           enquiries[]
  itineraries         itineraries[]
  feedbacks           customer_feedbacks[]
  sentItineraries     sent_itineraries[]
  sharedCustomerPdfs  SharedCustomerPdf[] // Added relation
}

model customer_feedbacks {
  id            String   @id @default(cuid())
  customerId    String   
  itineraryId   String?  @map("itinerary_id")
  type          String
  title         String
  description   String?
  status        String   @default("pending")
  documentUrl   String?  @map("document_url")
  documentName  String?  @map("document_name")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer      customers?   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  itinerary     itineraries? @relation(fields: [itineraryId], references: [id], onDelete: SetNull)

  @@map("customer_feedbacks")
}

model sent_itineraries {
  id             String       @id @default(cuid())
  customerName   String
  email          String
  whatsappNumber String?
  notes          String?
  documentUrl    String?
  documentName   String?
  status         String       @default("sent")
  sentDate       DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  customerId     String
  itineraryId    String?
  emailSent      Boolean      @default(false)
  whatsappSent   Boolean      @default(false)
  customer       customers    @relation(fields: [customerId], references: [id])
  itinerary      itineraries? @relation(fields: [itineraryId], references: [id])
}

model FlightEnquiry {
  id                    String   @id @default(uuid())
  name                  String
  phone                 String
  email                 String
  departureCity         String
  returnCity            String
  departureDate         String
  returnDate            String
  preferredAirlineClass String   @default("economy")
  numberOfTravellers    String
  numberOfKids          String
  assignedStaff         String?
  pointOfContact        String?
  notes                 String?
  leadSource            String   @default("Direct")
  status                String   @default("enquiry")
  enquiryDate           String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  createdBy             String?

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("flight_enquiries")
}

model AccommodationEnquiry {
  id                String   @id @default(uuid())
  name              String
  phone             String
  email             String
  locations         String[] @default([])
  startDate         String
  endDate           String
  adults            Int      @default(2)
  children          Int      @default(0)
  under5            Int      @default(0)
  from6to12         Int      @default(0)
  budget            Int      @default(500)
  accommodationType String[] @default([])
  hotelPreference   String[] @default([])
  assignedStaff     String?
  pointOfContact    String?
  notes             String?
  leadSource        String   @default("Direct")
  status            String   @default("enquiry")
  enquiryDate       DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("accommodation_enquiries")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  managerId String
  authorId  String
  manager   Manager  @relation("ManagerComments", fields: [managerId], references: [id], onDelete: Cascade)
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Staff {
  id             String      @id @default(uuid())
  name           String
  email          String      @unique
  phone          String?
  role           String      @default("STAFF")
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  assignedShares SharedDMC[] @relation("AssignedStaff")

  @@map("staff")
}

model SharedDMC {
  id              String          @id @default(uuid())
  dateGenerated   DateTime        @default(now())
  pdfUrl          String?
  isActive        Boolean         @default(false)
  status          SharedDMCStatus @default(PENDING)
  assignedStaffId String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  assignedStaff   Staff?          @relation("AssignedStaff", fields: [assignedStaffId], references: [id])
  selectedDMCs    SharedDMCItem[]

  @@index([assignedStaffId])
  @@map("shared_dmcs")
}

model SharedDMCItem {
  id          String        @id @default(uuid())
  sharedDMCId String
  dmcId       String
  status      DMCItemStatus @default(AWAITING_TRANSFER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sharedDMC   SharedDMC     @relation(fields: [sharedDMCId], references: [id], onDelete: Cascade)
  dmc         DMCForm       @relation("SharedDMCItems", fields: [dmcId], references: [id])

  @@unique([sharedDMCId, dmcId])
  @@index([sharedDMCId])
  @@index([dmcId])
  @@map("shared_dmc_items")
}

model Admin {
  id        String      @id @default(uuid())
  name      String
  phone     String
  email     String      @unique
  username  String      @unique
  password  String
  status    AdminStatus @default(INACTIVE)
  profileId String?     @unique
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   File?       @relation("AdminProfile", fields: [profileId], references: [id])

  @@index([email])
  @@index([status])
  @@map("admins")
}

enum AdminStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum SharedDMCStatus {
  PENDING
  SENT
  RECEIVED
  COMPLETED
}

enum DMCItemStatus {
  AWAITING_TRANSFER
  AWAITING_DMC_EUROPE
  AWAITING_TRAILS_DMC
  ITINERARY_VIEWED
  AWAITING_INTERNAL_REVIEW
  QUOTATION_RECEIVED
}

enum PaymentMethodType {
  BANK_ACCOUNT
  CREDIT_CARD
  DEBIT_CARD
  UPI
  QR_CODE
  PAYMENT_GATEWAY
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  AGENT_USER
  AGENT_ADMIN
  DMC_USER
  DMC_ADMIN
}

enum UserType {
  TEKKING_MYLES
  AGENCY
  DMC
}

enum BusinessType {
  TEKKING_MYLES
  AGENCY
  DMC
}

enum ManagerStatus {
  ACTIVE
  INACTIVE
}

enum DMCStatus {
  ACTIVE
  DEACTIVE
}

enum DMCRequestStatusEnum {
  PENDING
  APPROVED
  REJECTED
}

enum AgencyType {
  PRIVATE_LIMITED
  PROPRIETORSHIP
  PARTNERSHIP
  PUBLIC_LIMITED
  LLP
  TOUR_OPERATOR
  TRAVEL_AGENT
  DMC
  OTHER
}

enum PanType {
  INDIVIDUAL
  COMPANY
  TRUST
  OTHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum FlightRequirement {
  YES
  NO
}

enum PacePreference {
  RELAXED
  PACKED
}

enum TravelTag {
  FLIGHTS
  ACCOMMODATION
  FULL_PACKAGE
  SIGHTSEEING
}
enum CancellationPolicyType {
  DEFAULT
  CUSTOM
}

enum SharedPdfStatus {
  GENERATED
  SENT
  DELIVERED
  FAILED
  EXPIRED
}

enum EmailType {
  ITINERARY_SHARE
  CANCELLATION_NOTICE
  POLICY_UPDATE
  REMINDER
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  FAILED
  BOUNCED
}
