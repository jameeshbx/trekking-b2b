import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import type { DMCRegistrationData, DMCRegistrationResponse } from "@/types/dmc";
import { prisma } from "@/lib/prisma";
import { hash } from "bcryptjs";
import { BusinessType, Role, UserType } from "@prisma/client";

export async function POST(request: NextRequest) {
  try {
    const formData = (await request.json()) as DMCRegistrationData;

    // Validate required fields
    const requiredFields: (keyof DMCRegistrationData)[] = [
      "dmcName",
      "primaryContact",
      "phoneNumber",
      "designation",
      "ownerName",
      "ownerPhoneNumber",
      "email",
      "primaryCountry",
      "destinationsCovered",
      "cities",
    ];

    const missingFields = requiredFields.filter((field) => !formData[field]);

    if (missingFields.length > 0) {
      return NextResponse.json(
        {
          success: false,
          message: "Missing required fields",
          error: `Required fields missing: ${missingFields.join(", ")}`,
        } as DMCRegistrationResponse,
        { status: 400 }
      );
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      return NextResponse.json(
        {
          success: false,
          message: "Invalid email format",
          error: "Please provide a valid email address",
        } as DMCRegistrationResponse,
        { status: 400 }
      );
    }

    // Check if email already exists
    const existingUser = await prisma.user.findUnique({
      where: { email: formData.email },
    });

    if (existingUser) {
      return NextResponse.json(
        {
          success: false,
          message: "Email already registered",
          error: "A user with this email already exists",
        } as DMCRegistrationResponse,
        { status: 400 }
      );
    }

    // Create DMC record
    const dmc = await prisma.dMC.create({
      data: {
        name: formData.dmcName,
        config: {
          primaryContact: formData.primaryContact,
          phoneNumber: formData.phoneNumber,
          designation: formData.designation,
          ownerName: formData.ownerName,
          ownerPhoneNumber: formData.ownerPhoneNumber,
          email: formData.email,
          website: formData.website,
          primaryCountry: formData.primaryCountry,
          destinationsCovered: formData.destinationsCovered,
          cities: formData.cities,
          gstRegistration: formData.gstRegistration === "Yes",
          gstNo: formData.gstNo,
          yearOfRegistration: formData.yearOfRegistration,
          panNo: formData.panNo,
          panType: formData.panType,
          headquarters: formData.headquarters,
          country: formData.country,
          yearOfExperience: formData.yearOfExperience,
          primaryPhoneExtension: formData.primaryPhoneExtension,
          ownerPhoneExtension: formData.ownerPhoneExtension,
        },
        createdBy: "SYSTEM", // TODO: Replace with actual user ID when authentication is implemented
      },
    });

    // Create user account for DMC
    const hashedPassword = await hash("Welcome@123", 12); // Default password, should be changed on first login
    const user = await prisma.user.create({
      data: {
        email: formData.email,
        password: hashedPassword,
        name: formData.primaryContact,
        companyName: formData.dmcName,
        businessType: "DMC" as BusinessType,
        userType: "DMC" as UserType,
        role: "DMC_USER" as Role,
        dmcId: dmc.id,
      },
    });

    return NextResponse.json(
      {
        success: true,
        message: "DMC registered successfully",
        data: {
          ...formData,
          id: dmc.id,
          userId: user.id,
        },
      } as DMCRegistrationResponse,
      { status: 201 }
    );
  } catch (error) {
    console.error("Error registering DMC:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Failed to register DMC",
        error: error instanceof Error ? error.message : "Unknown error",
      } as DMCRegistrationResponse,
      { status: 500 }
    );
  }
}
